# Rによるデータ分析
## データの読み込み

じゃんけんのデータを作成しましょう。
データ<code>SEMdai_Rock.xlsx</code>には，
私が（実際は**R**の関数<code>sample()</code>が）30回のじゃんけんで出した手が入力されています。

これをダウンロードし，<code>自分</code>と書かれた列に
出した手を入力しましょう。

入力できたらデータを**R**に読み込みます。
そのために，**作業ディレクトリ**（working directory）と
**パッケージ**（package）について紹介します。

## 作業ディレクトリ
**R**には，**作業スペース**（working space）という考え方がありました。
「環境」とも呼ばれるここにオブジェクトを登録したり，ここから呼び出したりして分析作業を進めていきます。

同様に，作業ディレクトリ（working directory）では，ファイルにデータを書き込んだり，ファイルから読み込んだりすることができます。ディレクトリはフォルダと同義です。
明示的に指定しなければ，**R**がデータファイルなどを探すのは，この作業ディレクトリです。作業スペースが勉強机だとしたら，作業ディレクトリは「机の引き出し」に例えることができます。隠していたマンガ本を取り出したり，作成したノートをしまったりする場所です。

作業ディレクトリの場所を確認するには以下のようにします（macOSを想定）。

```{r}
# get working directory
getwd()           # --- 現在の作業ディレクトリの確認
# 作業ディレクトリの変更
setwd("~/Downloads") # ~で表されるホームディレクトリの下のダウンロードフォルダ
getwd()           # --- 再確認
```

作業ディレクトリに読み込みたいデータのファイルがあれば，
<code>"SEMdai_Rock.xlsx"</code>のようにファイル名を指定するだけでOKです。
もちろん，コンピュータ内の正確な場所を指定すれば，
作業ディレクトリがどこであっても読み込み可能です。

```{r}
flnm <- "~/Downloads/SEMdai_Rock.xlsx"  # フルパス
tbl_j <- readxl::read_xlsx(path = flnm) # これはズルで，本当は準備しないとエラーが出る
```



## パッケージの利用
データはcsv（comma separated values）形式で配布されることが多く，
各値がカンマで区切られただけのcsvファイルの方が，テキストファイルとして
メモ帳などでも開けるのでいいのですが，私が文字化けの問題に疲れ果てた感があり，
Excelを利用してしまっています。

**R**は，そのままでは拡張子xlsxのExcelファイルを扱えません。
そこで利用するのが**パッケージ**（package）です。
パッケージは，**R**の機能を拡張する関数やデータのまとまりです。
導入するとそれまで不可能，あるいは非常に煩雑であった処理を実行可能になります。
ここでは，Excelファイルを読み込めるようになる<code>readxl</code>を使います。

パッケージを利用するために必要なことは２つ，**インストール**と「**起動**」です。
パッケージを起動することは，「パッケージを読み込む」「パッケージを呼び出す」など
のように言われることもあります。

工場出荷時の状態のスマートフォンが元の**R**で，SNSツールやゲームなど，
インストールするアプリがパッケージであると捉えるとよいでしょう。
スマホアプリ（パッケージ）のインストールは一度行えばOKですが，
利用するには都度，指でタップして起動（パッケージの呼び出し）を
する必要があります。

パッケージは以下のように簡単にインストール可能です。

```{r}
# パッケージをダウンロードするリポジトリの指定
options(repos = "https://ftp.yz.yamagata-u.ac.jp/")
update.packages(ask = FALSE) # インストール済みパッケージのアップデート
# readxl がインストールされているかどうか確認
# 未インストールの場合にFALSEになるので，否定(!)してTRUEにし
# if以下が実行されるようにする
if(!require(readxl)){
  install.packages("readxl")
  require(readxl) # readxlの読み込み
}
```

関数<code>require()</code>は，<code>library()</code>と
同様に，引数にパッケージの名前を指定すると，そのパッケージを
呼び出す（起動する）ことのできる関数です。
すでにインストールされているパッケージの名称は，
オブジェクトのラベルなので，引数に指定する際には
引用符はいりません（文字列として扱う必要がないため
［引用符で囲んでもよい］）。

<code>require()</code>は，
パッケージの読み込みに対するステータスに応じて，
真偽値を返し，失敗するとFALSEとなります。


これでパッケージ<code>readxl</code>が使えるようになり，
関数<code>read_xlsx()</code>でExcelファイルが読み込めます。なお，<code>readxl::read_xlsx()</code>という
記法は，パッケージ<code>readxl</code>全体を使用可能にしなくても，その中に含まれる<code>read_xlsx()</code>だけ
使えるようにするものです。

改めてデータを読み込みます。
```{r}
# 今度は準備万端
# read:: とパッケージ名を付けなくてよい
tbl_j <- read_xlsx(path = flnm)
```

それでは，じゃんけんの結果を集計してみましょう。

```{r, echo=FALSE}
suppressMessages(require(tidyverse))
suppressMessages(require(janitor))
suppressMessages(require(kableExtra))
tbl_j2 <- tbl_j |>
  mutate(two = str_c(教員, 自分)) |>
  mutate(勝敗 = case_when(
    two %in% c("グーグー", "チョキチョキ", "パーパー") ~ "あいこ",
    two %in% c("グーパー", "チョキグー", "パーチョキ") ~ "勝ち",
    TRUE ~ "負け"
  )) |>
  select(-two)
# 出した手の勝敗
  vec_t <- tbl_j2 %>% tabyl(自分, 勝敗) %>%
    adorn_totals(c("col")) %>%
    adorn_percentages("col") %>%
    adorn_pct_formatting(digits = 1) %>%
    adorn_ns() %>%
    pull(Total)
  vec_t <- c(vec_t, "100.0% (30)")
  tbl_j2 %>% mutate(勝敗 = factor(勝敗, c("勝ち", "あいこ", "負け"))) %>% tabyl(自分, 勝敗) %>%
    adorn_totals(c("row", "col")) %>%
    adorn_percentages("row") %>%
    adorn_pct_formatting(digits = 1) %>%
    adorn_ns() %>%
    mutate(Total = vec_t) |>
    kable()
#
  tbl_t <- tbl_j2 %>%
    mutate(勝敗 = factor(勝敗, c("勝ち", "あいこ", "負け"))) |>
    tabyl(自分, 勝敗) %>%
    adorn_totals(c("row")) %>%
    adorn_percentages("row") %>%
    adorn_pct_formatting(digits = 1) %>%
    adorn_ns() %>%
    filter(自分 == "Total") %>%
    mutate(Total = "100.0% (30)")
  tbl_j2 %>%
    mutate(勝敗 = factor(勝敗, c("勝ち", "あいこ", "負け"))) |> tabyl(自分, 勝敗) %>%
    adorn_totals(c("col")) %>%
    adorn_percentages("col") %>%
    adorn_pct_formatting(digits = 1) %>%
    adorn_ns() %>%
    bind_rows(., tbl_t) |>
    kable()
```

パッケージ<code>janitor</code>を使いました。
同様の表を作れるでしょうか。


## 物件探し
ファイル<code>kawauchi_0819.xlsx</code>は，
リクルート社が運営する物件情報サイトsuumo（東北版）から，
2025年8月19日18:13時点でのデータをダウンロードした結果です。

suumoのトップページから「賃貸」をクリックすると，
「通学・通勤時間から探す」という
メニューがあります。この機能で
「通勤・通学先の最寄り駅」として「川内(宮城)」を選択し，「電車での所要時間」を「10分以内」
に設定，「乗換回数」は「こだわらない」で検索しました。

検索時点では26,346件の物件が抽出されました。

1ページに50物件を「建物ごとに表示」した状態で，1から71ページまで
以下の16のデータについて読み取った結果です（同じ建物に複数の賃貸物件（部屋）があるため，
「建物ごとに表示」の設定では，1ページに50物件の表示でも50部屋とは限らない）。

![](/images/ch03_rent.png)

同じ物件で情報が重複していた場合（物件名, 区, 地番, タイプ, 広さ, 階数, 家賃, 管理費が同じ物件は，ひとつだけ残した）や，
最寄駅までバスに乗る物件，
階数の表示が非標準的であった物件（3-5階など）を除外した結果，
4,095件の物件に関するデータとなりました。

最寄駅に関わる情報は，物件の最寄駅として最大3つ表示される駅のうち，最初の1つを対象としましたが，川内駅まで0分で到着する物件もあるため，データについてみなさんに意見を伺いたいです。
なお，表示の規則の詳細は不明ですが，対象とした最初の最寄駅が徒歩距離（分単位）で最短というわけでは
必ずしもなさそうです。ただし，短い時間が最初に表示される傾向はあるように見受けられました。

また，階数には欠損値，**欠測値**（missing value）があります。
元の物件情報では表示が -- となっていたデータです。おそらく戸建てだと思われます。
欠測値はExcelファイル上では空欄になっています。

上記のデータを入力したExcelファイル
<code>kawauchi_0819.xlsx</code>
には，
1列目に，連番を示す「番号」を挿入しています。

